#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""A PXE boot assistant service
"""


__version__ = '1.1'
__all__ = ['PxeUbuntu']
__author__ = 'DoroWu'
__home_page__ = ''

import sys
import time
import signal
import os
import logging
import logging.handlers
import commands
import subprocess
import atexit
import shutil
import glob
from datetime import datetime, timedelta
import gobject
from pyinotify import WatchManager, ThreadedNotifier, EventsCodes, ProcessEvent
from argparse import ArgumentParser, SUPPRESS
import ipaddr


SHARE_FOLDER = '/usr/share/pxeubuntu'


def main():
    args, extra_args = MyArgumentParser().parse()

    # Verify that script is run as root
    if os.getuid():
        sys.stderr.write('This script needs superuser '
                         'permissions to run correctly\n')
        sys.exit(1)

    LoggingConfiguration.set(args.log_level, args.log_filename, args.append)
    logging.debug('Arguments: {0!r}'.format(args))
    logging.debug('Extra Arguments: {0!r}'.format(extra_args))

    if not args.interface:
        for interface in MyNetwork.interfaces():
            if interface == 'lo':
                continue
            args.interface = interface
    if args.interface not in MyNetwork.interfaces():
        raise GeneralError(0, 'No interface [%s] found' % str(args.interface))

    if args.aufs:
        try:
            Command('grep -q "CONFIG_AUFS_EXPORT=y" '
                    '/boot/config-`uname -r`').run()
        except GeneralError as e:
            if e.code != 0:
                logging.info('No aufs-nfs supports: Revert to no aufs')
                args.aufs = False

    if args.log_level <= logging.DEBUG:
        MyNetwork.test()

    PxeUbuntu(args, extra_args).start()


class Daemon(object):
    """
    A generic daemon class.

    Usage: subclass the Daemon class and override the run() method
    """
    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null',
                 stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError, e:
            sys.stderr.write("fork #1 failed: %d (%s)\n".format(
                             e.errno, e.strerror))
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent
                sys.exit(0)
        except OSError, e:
            sys.stderr.write("fork #2 failed: %d (%s)\n".format(
                             e.errno, e.strerror))
            sys.exit(1)

        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile, 'w+').write("%s\n" % pid)

    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        try:
            pf = file(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return  # not an error in a restart

        # Try killing the daemon process
        try:
            while 1:
                os.kill(pid, signal.SIGTERM)
                time.sleep(0.1)
        except OSError, err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print str(err)
                sys.exit(1)

    def restart(self):
        """
        Restart the daemon
        """
        self.stop()
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon. It will be
        called after the process has been daemonized by start() or restart().
        """


class IsoChangeListener(ProcessEvent):
    def __init__(self, instant):
        super(self.__class__, self).__init__()
        self.instant = instant

    def process_IN_CREATE(self, event):
        pass

    def process_IN_DELETE(self, event):
        path = os.path.join(event.path, event.name)
        logging.info('FILE DELETE: ' + path)
        self.instant.remove(path)

    def process_IN_ATTRIB(self, event):
        path = os.path.join(event.path, event.name)
        logging.info('FILE ATTRIB: ' + path)
        mtime = datetime.fromtimestamp(os.path.getmtime(path))
        now = datetime.now()
        logging.debug(str(mtime))
        logging.debug(str(now))
        if now - mtime > timedelta(days=7):
            return
        self.instant.insert(path)

    def process_IN_MOVED_FROM(self, event):
        path = os.path.join(event.path, event.name)
        logging.info('FILE MOVE FROM: ' + path)
        if path.endswith('.iso'):
            self.process_IN_DELETE(event)

    def process_IN_MOVED_TO(self, event):
        path = os.path.join(event.path, event.name)
        logging.info('FILE MOVE TO: ' + path)
        if path.endswith('.iso'):
            self.process_IN_ATTRIB(event)


class GeneralError(Exception):
    def __init__(self, code, msg='Unknown'):
        self.code = code
        self.msg = msg

    def __str__(self):
        return 'Error ({0}): {1}'.format(self.code, self.msg)


class MyNetwork(object):
    @classmethod
    def init(cls):
        if hasattr(cls, "_has_init"):
            return
        cls._has_init = True
        cls._interfaces = {}
        interface_name, ip = None, None
        for line in Command('ip addr', silent=True, verbose=True)\
                    .run().stdout.split('\n'):
            logging.debug('! parse {0}'.format(line))
            if len(line) <= 2:
                continue
            if line[0] != ' ' and line[1] == ':':
                if interface_name:
                    cls._interfaces[interface_name] = {'address': ip}
                interface_name = line.split(' ')[1].strip(': ')
                logging.debug('New interface: ' + interface_name)
                continue
            line = line.strip()
            if line.startswith('inet '):
                ip = ipaddr.IPv4Network(line.split(' ')[1])
                logging.debug('New IP: ' + str(ip))

    @classmethod
    def ip(cls, interface):
        cls.init()
        if interface not in cls._interfaces:
            raise GeneralError(0)
            return None
        return cls._interfaces[interface]['address'].ip

    @classmethod
    def broadcast(cls, interface):
        cls.init()
        if interface not in cls._interfaces:
            raise GeneralError(0)
            return None
        return cls._interfaces[interface]['address'].broadcast

    @classmethod
    def network(cls, interface):
        cls.init()
        if interface not in cls._interfaces:
            raise GeneralError(0)
            return None
        return cls._interfaces[interface]['address'].network

    @classmethod
    def netmask(cls, interface):
        cls.init()
        if interface not in cls._interfaces:
            raise GeneralError(1)
        return cls._interfaces[interface]['address'].netmask

    @classmethod
    def netmask_size(cls, interface):
        cls.init()
        if interface not in cls._interfaces:
            raise GeneralError(2)
        return str(cls._interfaces[interface]['address'].prefixlen)

    @classmethod
    def interfaces(cls):
        cls.init()
        return [interface for interface in cls._interfaces]

    @classmethod
    def test(cls):
        for interface in cls.interfaces():
            logging.info('Interface : ' + interface)
            logging.info('    IP: {0!s}'.format(cls.ip(interface)))
            logging.info('    netmask: {0!s}'.format(cls.netmask(interface)))
            logging.info('    netmask_size: {0!s}'.format(
                         cls.netmask_size(interface)))
            logging.info('    broadcast: {0!s}'.format(
                         cls.broadcast(interface)))
            logging.info('    network: {0!s}'.format(cls.network(interface)))


class PxeUbuntu(Daemon):
    PXELINUX_DEFAULT_ITEM = \
'''### {label} - start\\
LABEL {label}\\
    MENU LABEL {label}\\
    KERNEL {label}/vmlinuz\\
    APPEND initrd={label}/initrd.lz  root=/dev/nfs nfsroot={ip}:{nfs_base}/{label} netboot=nfs boot=casper automatic-ubiquity noprompt quiet splash --\\
### {label} - end
'''
    DHCP_DEFAULT_CONF = \
'''### Automatically Add by pxeubuntu - start\\
subnet {0!s} netmask {1!s} {{\\
    range dynamic-bootp {2!s} {3!s};\\
    default-lease-time 21600;\\
    max-lease-time 43200;\\
    filename "pxelinux.0";\\
}}\\
### Automatically Add by pxeubuntu - end
'''

    def __init__(self, args, extra_args):
        super(self.__class__, self).__init__(args.service_pid_file)
        self._args = args
        self._extra_args = extra_args

    def start(self):
        def _start():
            if self._args.daemon:
                super(self.__class__, self).start()
            else:
                self.run()

        dirs = ('work_dir', 'iso_dir', 'nfs_dir', 'tftp_dir')
        for path_attr in dirs:
            path = getattr(self._args, path_attr)
            logging.info('args: {0}: {1}'.format(path_attr, path))
            if not os.path.isdir(path):
                os.makedirs(path)
        action_fns = {'start': _start,
                      'stop': self.stop,
                      'restart': self.restart,
                      'insert': self.insert,
                      'remove': self.remove,
                      'check': self.check,
                      'insert_copy': self.insert_copy,
                      'version': self.version}
        if len(self._extra_args) > 0:
            action_fns[self._args.action](self._extra_args[0])
        else:
            action_fns[self._args.action]()

    def version(self):
        logging.info('Version: ' + str(__version__))

    def run(self):
        # main loop
        self.loop = gobject.MainLoop()
        gobject.threads_init()

        # make sure loop dev is enough
        Command('bash -c \'for ((i={0};i<{1};i++)); do [ -e /dev/loop$i ] '
                '|| mknod -m 0600 /dev/loop$i b 7 $i; done\''.
                format(0, 64)).run()

        # reset tftpboot folder
        Command('cp -r {0} {1}'.
                format(os.path.join(SHARE_FOLDER, 'tftpboot/*'),
                       self._args.tftp_dir + os.sep)).run()

        # dhcp check
        try:
            network = str(MyNetwork.network(self._args.interface))
            with open('/etc/dhcp/dhcpd.conf', 'r') as f:
                for line in f:
                    if line.startswith('#'):
                        continue
                    if line.find('pxelinux.0') >= 0:
                        raise GeneralError(0)
                    if line.find(network) >= 0:
                        raise GeneralError(0)
            out = raw_input('Add PXE boot configure to dhcpd.conf? (Y/N) ')
            if out[0] in ('Y', 'y'):
                item = self.DHCP_DEFAULT_CONF.format(
                    MyNetwork.network(self._args.interface),
                    MyNetwork.netmask(self._args.interface),
                    MyNetwork.ip(self._args.interface) + 1,
                    MyNetwork.broadcast(self._args.interface) - 1)
                Command('sed -i -e \'$a{content}\' {file}'.format(
                        content=item,
                        file='/etc/dhcp/dhcpd.conf')).run()
                Command('service isc-dhcp-server restart').run()
        except GeneralError:
            pass

        #remove all in iso, then insert
        files = []
        for filename in os.listdir(self._args.iso_dir):
            filepath = os.path.join(self._args.iso_dir, filename)
            if not os.path.isfile(filepath) or not filepath.endswith('.iso'):
                continue
            files.append(filepath)
        for f in files:
            try:
                self.remove(f)
                self.insert(f)
            except GeneralError as e:
                logging.warning(str(e))

        self.check()

        # inotify
        wm = WatchManager()
        notifier = ThreadedNotifier(wm, IsoChangeListener(self))
        mask = (EventsCodes.ALL_FLAGS['IN_DELETE']
                | EventsCodes.ALL_FLAGS['IN_CREATE']
                | EventsCodes.ALL_FLAGS['IN_ATTRIB']
                | EventsCodes.ALL_FLAGS['IN_MOVED_FROM']
                | EventsCodes.ALL_FLAGS['IN_MOVED_TO'])
        notifier.start()
        wdd = wm.add_watch(self._args.iso_dir, mask, rec=True)

        # services
        signal.signal(signal.SIGTERM, self._sigterm)
        signal.signal(signal.SIGCHLD, self._sigchld)

        logging.info('Start monitoring file in ' + self._args.iso_dir)

        try:
            self.loop.run()
        except KeyboardInterrupt:
            logging.info('^c')

        notifier.stop()

        #remove all in iso, then insert
        files = []
        for filename in os.listdir(self._args.iso_dir):
            filepath = os.path.join(self._args.iso_dir, filename)
            if not os.path.isfile(filepath) or not filepath.endswith('.iso'):
                continue
            files.append(filepath)
        for f in files:
            try:
                self.remove(f)
            except GeneralError as e:
                logging.warning(str(e))

    def _sigterm(self, signum, frame):
        logging.info('Catch SIGTERM')
        self.loop.quit()

    def _sigchld(self, signum, frame):
        #logging.info('Catch SIGCHLD')
        pass

    def insert(self, image, by_copy=False):
        basename = os.path.basename(image)
        image_name = basename[:basename.rfind('.')]
        logging.info('Inert image {0} in path {1}.'.format(image_name, image))
        if by_copy:
            logging.info('COPY MODE')
        if not os.path.isfile(image):
            raise GeneralError(1, 'Image {0} not found'.format(image))
        try:
            nfs_path = os.path.join(self._args.nfs_dir, image_name)
            tftp_path = os.path.join(self._args.tftp_dir, image_name)
            base_path = os.path.join(self._args.nfs_dir, image_name + '_orig')
            diff_path = os.path.join(self._args.nfs_dir, image_name + '_pxediff')
            # nfs
            os.makedirs(nfs_path)
            if not by_copy and self._args.aufs:
                os.makedirs(base_path)
                Command('mount -t iso9660 "{0}" "{1}"'.format(
                        image, base_path)).run()
                try:
                    shutil.rmtree(diff_path)
                except:
                    pass
                os.makedirs(diff_path)
                Command('mount -t aufs -o br:{0}:{1} none {2}'.format(
                        diff_path, base_path, nfs_path)).run()
            elif not by_copy and not self._args.aufs:
                Command('mount -t iso9660 "{0}" "{1}"'.format(
                        image, nfs_path)).run()
            else:
                tmp_path = os.path.join(self._args.nfs_dir, 'tmp')
                if not os.path.exists(tmp_path):
                    os.makedirs(tmp_path)
                try:
                    Command('umount -f {0}'.format(tmp_path)).run()
                except Exception as e:
                    pass
                Command('mount -t iso9660 "{0}" "{1}"'.
                        format(image, tmp_path)).run()
                Command('cp -r {0}/* {1}/'.format(tmp_path, nfs_path)).run()
                try:
                    Command('umount -f {0}'.format(tmp_path)).run()
                except Exception as e:
                    logging.warning('umount: ' + str(e))
            cmd = ('sed -i -e \'$a{0!s} {1!s}/{2!s}'
                  '(ro,no_root_squash,no_subtree_check)\' /etc/exports').format(
                  nfs_path, MyNetwork.ip(self._args.interface),
                  MyNetwork.netmask_size(self._args.interface))
            if self._args.aufs:
                cmd = ('sed -i -e \'$a{0!s} {1!s}/{2!s}'
                    '(rw,sync,fsid=999,no_subtree_check)\' /etc/exports').format(
                    nfs_path, MyNetwork.ip(self._args.interface),
                    MyNetwork.netmask_size(self._args.interface))
            Command(cmd).run()
            Command('exportfs -a').run()

            # tftpboot/pxelinux.cfg/default
            item = self.PXELINUX_DEFAULT_ITEM.format(
                        label=image_name,
                        nfs_base=self._args.nfs_dir,
                        ip=str(MyNetwork.ip(self._args.interface)))
            Command('sed -i -e \'$a{content}\' {file}'.format(
                    content=item,
                    file=os.path.join(self._args.tftp_dir, 'pxelinux.cfg',
                                      'default'))).run()

            # vmlinuz and initrd.lz
            os.makedirs(tftp_path)
            for p in ('casper', 'install'):
                if os.path.exists(os.path.join(nfs_path, p)):
                    base_casper = p
                    break
            else:
                raise GeneralError(3, 'no vmlinuz and initrd.lz base folder')
            initrd = glob.glob(os.path.join(nfs_path, base_casper, 'initrd*'))
            vmlinuz = glob.glob(os.path.join(nfs_path, base_casper, 'vmlinu*'))
            if len(initrd) <= 0 or len(vmlinuz) <= 0:
                raise GeneralError(4, 'no vmlinuz* or initrd* found in ' + base_casper)
            shutil.copy(initrd[0], os.path.join(tftp_path, 'initrd.lz'))
            shutil.copy(vmlinuz[0], os.path.join(tftp_path, 'vmlinuz'))
        except (GeneralError, shutil.Error) as e:
            if isinstance(e, GeneralError):
                raise e
            raise GeneralError(404, 'Error: ' + str(e))
        logging.info('Insert successfully')

    def remove(self, image):
        basename = os.path.basename(image)
        image_name = basename[:basename.rfind('.')]
        logging.info('Remove image {0} in path {1}'.format(image_name, image))
        try:
            nfs_path = os.path.join(self._args.nfs_dir, image_name)
            tftp_path = os.path.join(self._args.tftp_dir, image_name)
            base_path = os.path.join(self._args.nfs_dir, image_name + '_orig')
            diff_path = os.path.join(self._args.nfs_dir, image_name + '_pxediff')
            # tftp
            if os.path.exists(tftp_path):
                shutil.rmtree(tftp_path)
            # tftp default
            Command('sed -i \'/### {0} - start/,/### {0} - end/d\' {1}'.
                    format(image_name,
                           os.path.join(self._args.tftp_dir, 'pxelinux.cfg', 'default'))).run()
            # nfs
            Command('sed -i \'/\/%s /d\' /etc/exports' % (image_name)).run()
            Command('exportfs -a').run()
            if os.path.exists(nfs_path):
                try:
                    Command('umount -f {0}'.format(nfs_path)).run()
                except GeneralError as e:
                    pass
                try:
                    shutil.rmtree(nfs_path)
                except:
                    pass
            if os.path.exists(base_path):
                try:
                    Command('umount -f {0}'.format(base_path)).run()
                except:
                    pass
                try:
                    shutil.rmtree(base_path)
                except:
                    pass
            if os.path.exists(diff_path):
                try:
                    shutil.rmtree(diff_path)
                except:
                    pass
        except (GeneralError, shutil.Error) as e:
            if isinstance(e, GeneralError):
                raise e
            raise GeneralError(404, 'Error: ' + str(e))
        logging.info('Remove successfully')

    def check(self):
        def tftp_dir():
            if not os.path.exists(os.path.join(self._args.tftp_dir, image_name, 'vmlinuz')):
                return False
            if not os.path.exists(os.path.join(self._args.tftp_dir, image_name, 'initrd.lz')):
                return False
            return True

        def tftp_boot():
            cmd = 'grep -q \' initrd=' + os.path.join(image_name, 'initrd.lz') + ' \' ' +\
                    os.path.join(self._args.tftp_dir, 'pxelinux.cfg', 'default')
            s, o = commands.getstatusoutput(cmd)
            if s != 0:
                return False
            return True

        def is_mount():
            cmd = 'grep -q \' ' + os.path.join(self._args.nfs_dir, image_name) + ' \' ' +\
                    os.path.join('/proc', 'mounts')
            s, o = commands.getstatusoutput(cmd)
            if s != 0:
                return False
            return True

        def has_mount_point():
            if not os.path.exists(os.path.join(self._args.nfs_dir, image_name)):
                return False
            return True

        def is_export():
            cmd = 'grep -q \'^' + os.path.join(self._args.nfs_dir, image_name) + ' \' ' +\
                    os.path.join('/etc', 'exports')
            s, o = commands.getstatusoutput(cmd)
            if s != 0:
                return False
            return True

        files = []
        width = 0
        for filename in os.listdir(self._args.iso_dir):
            if len(filename) > width:
                width = len(filename)
            filepath = os.path.join(self._args.iso_dir, filename)
            if not os.path.isfile(filepath) or not filepath.endswith('.iso'):
                continue
            files.append((filename, time.localtime(os.path.getmtime(filepath))))
        files.sort(key=lambda fileitem: fileitem[1])
        logging.info('check ISOs - TD(TFTP DIR) TB(TFTP BOOT) M(MOUNT) MP(MOUNT POINT) E(EXPORTS)')
        for fileitem in files:
            image_name = fileitem[0][:fileitem[0].rfind('.')]
            result = ''
            result += 'TD ' if tftp_dir() else '   '
            result += 'TB ' if tftp_boot() else '   '
            result += 'M ' if is_mount() else '  '
            result += 'MP ' if has_mount_point() else '   '
            result += 'E ' if is_export() else '  '
            if result == 'TD TB M MP E ':
                result = 'mounted'
            else:
                for c in result:
                    if c != ' ':
                        result = 'ugly: ' + result
                        break
                else:
                    result = ''
            logging.info('{0:<{1}} {2}'.format(fileitem[0], width, result))

    def insert_copy(self, image):
        self.insert(image, True)


class Command(object):
    """Simple subprocess. Popen wrapper to run shell commands and log their output
    """
    def __init__(self, command_str, silent=False, verbose=False):
        self.command_str = command_str
        self.silent = silent
        self.verbose = verbose

        self.process = None
        self.stdout = None
        self.stderr = None
        self.time = None

    def run(self):
        """Execute shell command and return output and status
        """
        logging.debug('Executing: {0!r}...'.format(self.command_str))

        self.process = subprocess.Popen(self.command_str,
                                        shell=True,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE)
        start = datetime.now()
        result = self.process.communicate()
        end = datetime.now()
        self.time = end - start

        self.returncode = self.process.returncode
        if self.returncode != 0 or self.verbose:
            stdout, stderr = result
            message = ['Output:'
                       '- returncode:\n{0}'.format(self.returncode)]
            if stdout:
                if type(stdout) is bytes:
                    stdout = stdout.decode()
                message.append('- stdout:\n{0}'.format(stdout))
            if stderr:
                if type(stderr) is bytes:
                    stderr = stderr.decode()
                message.append('- stderr:\n{0}'.format(stderr))
            if not self.silent:
                logging.debug('\n'.join(message))

            self.stdout = stdout
            self.stderr = stderr

        if self.returncode != 0:
            raise GeneralError(self.returncode,
                               '{0}: {1}'.format(self.command_str,
                                                 self.stderr))

        return self


class MyArgumentParser(object):
    """Command-line argument parser
    """
    def __init__(self):
        """Create parser object
        """
        description = ('A PXE boot assistant service'
                       '')
        epilog = ('')
        parser = ArgumentParser(description=description, epilog=epilog)
        log_levels = ['notset', 'debug', 'info',
                      'warning', 'error', 'critical']
        parser.add_argument('--log-level', dest='log_level_str',
                            default='info', choices=log_levels,
                            help=('Log level. '
                                  'One of {0} or {1} (%(default)s by default)'
                                  .format(', '.join(log_levels[:-1]),
                                          log_levels[-1])))
        parser.add_argument('--log-dir', dest='log_dir', default='/var/log',
                            help=('Path to the directory to store log files'))
        parser.add_argument('--work-dir', dest='work_dir',
                            default=os.path.expanduser('~'),
                            help=('Path to the working directory. '
                                  '$HOME directory is default. '
                                  'Some directories refer this option as base folder'
                                  ', such as iso, nfs mount point, tftp'))
        parser.add_argument('--iso-dir', dest='iso_dir',
                            default='iso',
                            help=('Directory to put iso files'))
        parser.add_argument('--nfs-dir', dest='nfs_dir',
                            default='exportfs',
                            help=('Directory to mount iso files'))
        parser.add_argument('--tftp-dir', dest='tftp_dir',
                            default='/var/lib/tftpboot',
                            help=('Directory to tftp root'))
        parser.add_argument('--pid-file', dest='service_pid_file',
                            default=os.path.basename(__file__) + '.pid',
                            help=SUPPRESS)
        parser.add_argument('-d', '--daemon', action='store_true',
                            help=('Run as daemon'))
        parser.add_argument('-i', '--interface', dest='interface',
                            help=('network interface such as eth0, wlan0 for'
                                  ' DHCP and NFS binding'))
        parser.add_argument('--aufs', action='store_true',
                            help=SUPPRESS)
        actions = ['start', 'stop', 'restart', 'insert', 'remove', 'check',
                   'insert_copy', 'version']
        parser.add_argument('action', choices=actions,
                            default='check',
                            help=('Action is one of {0}'.
                                  format(', '.join(actions))))
        # Append to log on subsequent startups
        parser.add_argument('--append', action='store_true',
                            default=False, help=SUPPRESS)

        self.parser = parser

    def parse(self):
        """Parse command-line arguments
        """
        args, extra_args = self.parser.parse_known_args()
        args.log_level = getattr(logging, args.log_level_str.upper())

        for path in ('iso_dir', 'nfs_dir', 'tftp_dir', 'service_pid_file'):
            setattr(args, path, os.path.join(args.work_dir, getattr(args, path)))

        # Log filename shows clearly the type of test (pm_operation)
        # and the times it was repeated (repetitions)
        args.log_filename = os.path.join(args.log_dir,
                                         ('{0}.log'
                                          .format(os.path.basename(__file__))))

        return args, extra_args


class LoggingConfiguration(object):
    @classmethod
    def set(cls, log_level, log_filename, append):
        """ Configure a rotating file logging
        """
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)

        # Log to sys.stderr using log level passed through command line
        if log_level != logging.NOTSET:
            log_handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s %(levelname)-8s '
                                        '%(message)s')
            log_handler.setFormatter(formatter)
            log_handler.setLevel(log_level)
            logger.addHandler(log_handler)

        # Log to rotating file using DEBUG log level
        log_handler = logging.handlers.RotatingFileHandler(log_filename,
                                                           mode='a+',
                                                           backupCount=3)
        formatter = logging.Formatter('%(asctime)s %(levelname)-8s '
                                      '%(message)s')
        log_handler.setFormatter(formatter)
        log_handler.setLevel(logging.DEBUG)
        logger.addHandler(log_handler)

        if not append:
            # Create a new log file on every new
            # (i.e. not scheduled) invocation
            log_handler.doRollover()


if __name__ == '__main__':
    main()
